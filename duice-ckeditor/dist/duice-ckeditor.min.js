/*!
 * duice-ckeditor - v0.3.1
 * git: https://gitbub.com/chomookun/duice-plugin
 * website: https://duice-plugin.chomookun.org
 * Released under the LGPL(GNU Lesser General Public License version 3) License
 */
this.duice=this.duice||{},this.duice.plugin=this.duice.plugin||{},this.duice.plugin.Ckeditor=function(e,t){"use strict";var n=function(e,t,n,i){return new(n||(n=Promise))((function(r,l){function a(e){try{s(i.next(e))}catch(e){l(e)}}function o(e){try{s(i.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}s((i=i.apply(e,t||[])).next())}))};class i extends t.ObjectElement{constructor(e,t,n){super(e,t,n),this.editor=null,this.internalValue=null,this.getHtmlElement().appendChild(this.createStyle());const i=document.createElement("textarea");console.error("===========",this.getHtmlElement().style.height),e.appendChild(i),ClassicEditor.create(i,{extraPlugins:[r]}).then((e=>{this.editor=e,null!==this.internalValue&&this.editor.setData(this.internalValue),e.editing.view.document.on("blur",((t,n)=>{e.getData()!==this.internalValue&&(this.internalValue=e.getData(),this.notifyPropertyChanged())})),e.ui.view.editable.element.addEventListener("blur",(()=>{e.getData()!==this.internalValue&&(this.internalValue=e.getData(),this.notifyPropertyChanged())}))})).catch((e=>{console.error("Error initializing CKEditor:",e)}))}createStyle(){let e=document.createElement("style");return e.innerHTML="\n            .ck-editor {\n                display: flex;\n                flex-direction: column;\n                height: 100% !important;\n            }\n            .ck-editor__main {\n                flex: 1;\n            }\n            .ck-editor__editable_inline:not(.ck-comment__input *) {\n                height: 100%;\n            }\n        ",e}notifyPropertyChanged(){let e=this.getHtmlElement(),n=this.getBindData(),i=new t.PropertyChangingEvent(e,n,this.getProperty(),this.getValue(),this.getIndex());this.notifyObservers(i)}setValue(e){this.internalValue=e,this.editor&&this.editor.setData(null!=e?e:"")}getValue(){return this.internalValue}setReadonly(e){this.editor&&(!0===e?this.editor.enableReadOnlyMode("readonly"):this.editor.disableReadOnlyMode("readonly"))}setDisabled(e){this.editor&&(!0===e?this.editor.enableReadOnlyMode("disabled"):this.editor.disableReadOnlyMode("disabled"))}}class r{constructor(e){e.plugins.get("FileRepository").createUploadAdapter=e=>(console.log("== loader",e),new l(e))}}class l{constructor(e){this.loader=e}upload(){return n(this,void 0,void 0,(function*(){return this.loader.file.then((e=>new Promise(((t,n)=>{const i=new FileReader;i.onload=()=>{t({default:i.result})},i.onerror=e=>{n(e)},i.readAsDataURL(e)}))))}))}}class a extends t.ObjectElementFactory{createElement(e,t,n){return new i(e,t,n)}}return t.ElementRegistry.register(`${t.Configuration.getNamespace()}-ckeditor`,new a),e.CkeditorElement=i,e.CkeditorElementFactory=a,Object.defineProperty(e,"__esModule",{value:!0}),e}({},duice);
//# sourceMappingURL=duice-ckeditor.min.js.map
